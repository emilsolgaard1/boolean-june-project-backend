openapi: 3.0.3
info:
  title: Boolean June Project - Backend
  description: Scrum-like team management tool
  version: 0.2.2

servers:
  - url: http://localhost:4000
tags:
  - name: users
  - name: projects
  - name: tasks
  - name: task-logs
paths:


  #region // USERS //

  /users:

    post:
      tags:
        - users
      summary: Create a user
      description: Creates a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDTO'
      responses:
        201:
          description: Created successfully.
        400:
          description: One or more values are missing or invalid.

  /users/{userId}:

    get:
      tags:
        - users
      summary: Get a user by ID
      description: Get a specific user by ID.
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserReadDTO'
        404:
          description: No user with that userId was found.

  /users/{userId}/project:

    put:
      tags:
        - users
      summary: Assign user to a project
      description: Assign a single user to an existing project.
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateProjectDTO'
      responses:
        201:
          description: Updated successfully.
        400:
          description: One or more values are missing or invalid.
        404:
          description: No user with that userId was found.

  /projects/{projectId}/users:

    get:
      tags:
        - users
      summary: Get all users in a project
      description: Get a list of all users in a specific project.
      parameters:
        - name: projectId
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List<UserReadNoProjectDTO>'
        404:
          description: No users were found with that projectId.

  #endregion

  #region // PROJECTS //

  /projects:

    post:
      tags:
        - projects
      summary: Create a project
      description: Create a new project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateDTO'
      responses:
        201:
          description: Created successfully.
        400:
          description: One or more values are missing or invalid.

  /projects/{projectId}:

    get:
      tags:
        - projects
      summary: Get a project by ID
      description: Get a specific project by its ID.
      parameters:
        - name: projectId
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectReadDTO'
        404:
          description: No project with that projectId was found.

  #endregion

  #region // TASKS //

  /tasks/{taskId}:

    put:
      tags:
        - tasks
      summary: Update a task
      description: Update an existing task.
      parameters:
        - name: taskId
          in: path
          description: The ID of the task
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateDTO'
      responses:
        201:
          description: Updated successfully.
        400:
          description: One or more values are missing or invalid.

    get:
      tags:
        - tasks
      summary: Get a task by ID
      description: Get a specific task by ID.
      parameters:
        - name: taskId
          in: path
          description: The ID of the task
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskReadDTO'
        404:
          description: No task with that taskId was found.

    delete:
      tags:
        - tasks
      summary: Delete a task
      description: Delete an existing task.
      parameters:
        - name: taskId
          in: path
          description: The ID of the task
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Deleted successfully.
        404:
          description: No task with that projectId was found.

  /projects/{projectId}/tasks:

    post:
      tags:
        - tasks
      summary: Create a task for a project
      description: Create a new task for an existing project.
      parameters:
        - name: projectId
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateDTO'
      responses:
        201:
          description: Created successfully.
        400:
          description: One or more values are missing or invalid.
        404:
          description: No project with that projectId was found.

    get:
      tags:
        - tasks
      summary: Get all tasks for a project
      description: Get a list of all tasks for a given project.
      parameters:
        - name: projectId
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List<TaskReadDTO>'
        404:
          description: No tasks were found with that projectId.

  /projects/{projectId}/completed-tasks:
    get:
      tags:
        - tasks
      summary: Get all completed tasks for a project
      description: Get a list of all completed tasks for a given project.
      parameters:
        - name: projectId
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List<TaskReadDTO>'
        404:
          description: No completed tasks were found with that projectId.

  #endregion

  #region // TASK-LOGS //

  /task-logs:

    post:
      tags:
        - task-logs
      summary: Create a task log
      description: Create a new task log.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskLogCreateDTO'
      responses:
        201:
          description: Created successfully.
        400:
          description: One or more values are missing or invalid.

  /task-logs/{taskLogId}:

    get:
      tags:
        - task-logs
      summary: Get a task log by ID
      description: Get a specific task log by ID.
      parameters:
        - name: taskLogId
          in: path
          description: The ID of the task log
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskLogReadDTO'
        404:
          description: No task log with that taskLogId was found.

  /projects/{projectId}/latest-5-task-logs:

    get:
      tags:
        - task-logs
      summary: Get 5 latest task logs
      description: Get the 5 latest task logs ordered by logged date.
      parameters:
        - name: projectId
          in: path
          description: The ID of the project
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List<TaskLogReadDTO>'
        404:
          description: No task logs were found with that projectId.

  #endregion



  ########################
  ###### COMPONENTS ######
  ########################

components:
  schemas:

    #region // USERS //

    UserCreateDTO:
      type: object
      required: [name]
      properties:
        name:
          type: string
          example: Emil Solgaard

    UserReadDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        projectId:
          type: integer
          nullable: true
          example: 1
        name:
          type: string
          example: Emil Solgaard


    UserReadNoProjectDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Emil Solgaard

    List<UserReadNoProjectDTO>:
      type: array
      items:
        $ref: '#/components/schemas/UserReadNoProjectDTO'

    UserUpdateProjectDTO:
      type: object
      required: [projectId]
      properties:
        projectId:
          type: integer
          nullable: true
          example: 1

    #endregion

    #region // PROJECTS //

    ProjectCreateDTO:
      type: object
      required: [ projectMasterId, name ]
      properties:
        name:
          type: string
          example: Scrum-like App
        projectMasterId:
          type: integer
          example: 1

    ProjectReadDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Scrum-like App
        projectMasterId:
          type: integer
          example: 1

    #endregion

    #region // TASKS //

    TaskCreateDTO:
      type: object
      required: [ productOwnerId, estimateMinutes, title ]
      properties:
        productOwnerId:
          type: integer
          example: 1
        developerId:
          type: integer
          example: 1
        estimateMinutes:
          type: integer
          example: 30
        title:
          type: string
          example: Code 'create task'
        description:
          type: string
          example: Code the 'create task' functionality

    TaskReadDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        projectId:
          type: integer
          example: 1
        productOwnerId:
          type: integer
          example: 1
        developerId:
          type: integer
          example: 1
        estimateMinutes:
          type: integer
          example: 30
        completed:
          type: boolean
          example: true
        spentMinutes:
          type: integer
          example: 20
        startedAt:
          type: string
          format: date-time
          example: 2023-06-12T14:30:00Z
        completedAt:
          type: string
          format: date-time
          example: 2023-06-12T14:50:00Z
        title:
          type: string
          example: Code 'create task'
        description:
          type: string
          example: Code the 'create task' functionality

    List<TaskReadDTO>:
      type: array
      items:
        $ref: '#/components/schemas/TaskReadDTO'

    TaskUpdateDTO:
      type: object
      properties:
        productOwnerId:
          type: integer
          example: 1
        developerId:
          type: integer
          example: 1
        estimateMinutes:
          type: integer
          example: 30
        completed:
          type: boolean
          example: true
        spentMinutes:
          type: integer
          example: 20
        startedAt:
          type: string
          format: date-time
          example: 2023-06-12T14:30:00Z
        completedAt:
          type: string
          format: date-time
          example: 2023-06-12T14:50:00Z
        title:
          type: string
          example: Code "create task"
        description:
          type: string
          example: Code the 'create task' functionality

    #endregion

    #region // TASK-LOGS //

    TaskLogCreateDTO:
      type: object
      required: [ developerId, taskId, taskStatusId, title ]
      properties:
        developerId:
          type: integer
          example: 1
        taskId:
          type: integer
          example: 1
        taskStatusId:
          type: integer
          example: 1
        title:
          type: string
          example: Sudden dementia!
        description:
          type: string
          example: I forgot how to code in Java! HELP!

    TaskLogReadDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        developerId:
          type: integer
          example: 1
        taskId:
          type: integer
          example: 1
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
        loggedAt:
          type: string
          format: date-time
          example: 2023-06-12T14:40:00Z
        title:
          type: string
          example: Sudden dementia!
        description:
          type: string
          example: I forgot how to code in Java! HELP!

    List<TaskLogReadDTO>:
      type: array
      items:
        $ref: '#/components/schemas/TaskLogReadDTO'

    TaskStatus:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: Critical problem!

    #endregion